11-09-2024
Created a venv named-penv.(python -m venv penv)
        (activated it from penv>scripts>activate)
Installed django in penv (pip install django)
Now start project through (django -admin startproject ekart_project)
        Now directory into ekart_project and  create app
Created app through (python manage.py startapp accounts)
In settings add in installed apps (ekart_project>settings.py>INSTALLED_APPS)
   add app name.
 
Created  >gitignore file added all from gitignore.io (django)
also env name is penv so added and changed it in .gitignore file also
                .penv
                penv/
                PENV/
                penv.bak/ in .gitignore so that it dont show in git repo
  12-09-2024
  In accounts app >models.py
   created AccountsManager,Accounts,UserProfile in account>models.py
        AccountsManager has user and superuser creation
        Accounts has username,email,first_name,last_name
        UserProfile has user which has onetoone relationship with Accounts user ,full_address 

also in setting.py of ekart_project
        added AUTH_USER_MODEL = 'accounts.Accounts'
        added AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']
      #  It takes privilege of accounts.Accounts otehrwise user goes into other app or random.
Regsitered in admin.py of ekart_project
                admin.site.register(Account)
                admin.site.register(UserProfile)
Installed   pillow for image processing  through
                        pip install pillow
Applied migration and migrate through 
                python manage.py makemigrations
                python manage.py migrate 
Create superuser through python manage.py createsuperuser
        email-pankajmendla@gmail.com
        username-iampm07
        pswrd-Pankaj123
14-09-24
Created category app added in settings.py
                class Category(models.Model):
                        category_name= models.CharField(max_length=50,unique=True)
                        slug=models.SlugField(max_length=100,unique=True)
                        description=models.TextField(max_length=255,blank=True)
                        cat_image=models.ImageField(upload_to='photos/categories',blank=True)
Registered in admin.py through
                       from .models import Category
                        
                        admin.site.register(Category)
Created store app added in settings.py
                
from category.models import Category
from django.urls import reverse

        class Product(models.Model):
                product_name=models.CharField(max_length=200,unique=True)
                slug = models.SlugField(max_length=200,unique=True)
                description=models.TextField(max_length=500,blank=True)
                price=models.IntegerField()
                images=models.ImageField(upload_to='photos/products')
                stock=models.IntegerField()
                is_available=models.BooleanField(default=True)
                category=models.ForeignKey(Category,on_delete=models.CASCADE)
                created_date=models.DateTimeField(auto_now_add=True)
                modified_date = models.DateTimeField(auto_now=True)

                def __str__(self):
                        return self.product_name
Registered in admin.py
                  from . import models

                admin.site.register(models.Product)   
Applied migration for category and products.

Created models in store 
        
class Variation(models.Model):
    product=models.ForeignKey(Product,on_delete=models.CASCADE)
    variation_category=models.CharField(max_length=100,choices=variation_category_choice)
    variation_value=models.CharField(max_length=100)
    is_active=models.BooleanField(default=True)
    created_date=models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return self.product
        Registered in admin.py of store app

Created new app orders
        added in settings.py
Created Payment and order model in orders>model.py














Structure completed insde work started from here.........//////////////////////////////////


1)      In Accounts folder ,create anew file forms.py
        from django import forms
        from .models import Account
        class RegistrationForm(forms.ModelForm):
        class Meta:
                #(to link  model to form)
                model = Account
                fields =['first_name','last_name','phone_number','email','password']
         
2)inside accounts/views.py  following changes:

3)Now we have this form variable available in register.html 
4)And changes inside register.html(gathering  all first last name from form variable)

5)      add this to accounts/forms.py
                password = forms.CharField(widget=forms.PasswordInput(attrs={
                        'placeholder':'Enter password'
                        }))

                confirm_password = forms.CharField(widget=forms.PasswordInput(attrs={
                        'placeholder':'Confirm password'
                        }))
                def __init__(self, *args, **kwargs):
        super(RegistrationForm, self).__init__(*args, **kwargs)
        self.fields['first_name'].widget_attrs['placeholder']="Enter first name"
        self.fields['last_name'].widget_attrs['placeholder']="Enter last name"
        for field in self.fields:
            self.fields[field].widget.attrs['class']='form-control'
        the above init method is to give all the fields bootstrap 'form-control class
        and you also give placeholder to all the specific fields.
6)  The again make changes inside register.html to handle post data request:
                from django.shortcuts import render
                from .forms import RegistrationForm
                from .models import Account



                def register(request):
                if request.methpd=="POST":
                        form=RegistrationForm(request.POST)
                        if form.is_valid():
                        first_name=form.cleaned_data['first_name']
                        last_name=form.cleaned_data['last_name']
                        phone_number=form.cleaned_data['phone_number']
                        email=form.cleaned_data['email']
                        password=form.cleaned_data['password']
                        username=email.split('@')[0]
                        user=Account.objects.create_user(first_name=first_name,last_name=last_name,email=email,username=username)
                        user.phone_number=phone_number
                        user.save()
                        return redirect('register')
                        else:
                        form= RegistrationForm()
                        context= {
                        'form':form,
                        }
                        return render(request,'accounts/register.html',context)
 7)    Create  a function inside accounts /forms.py  to check  password and confirm password are same:

                def clean(self):
                        cleaned_data=super(RegistrationForm, self).clean()
                        password = cleaned_data.get('password')
                        confirm_password=cleaned_data.get('confirm password')

                        if password != confirm_password:
                        raise forms.ValidationError(
                                "Password  does not match !"
                        )
        -and also put {{form.email.error}} and {{form.non_field_error}}below the submit button inside the register.html

8) Now use django message inside settings.py
        from django.contrib.messages import constants as messages
        MESSAGE_TAGS={
                messages.ERROR:'danger'
        }
9) Create alerts.html inside includes folder:
        {% if messages %}

        {% for message in messages %}

        <div id="message" class="container">
        <div{%if message.tags %} class="alert alert-{{message.tags}}" {% endif %} role="alert">
        <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span></button>
        {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}Error:{% endif %}
        {{ message }}
        </div>

        </div>
        {% endfor %}
        {% endif %}
10) Include alerts.html inside register.html
11) you can put the below code inside ekart_project/static/js/script.js
                setTimeout(function(){
                        $('#message').fadeout('slow')
                },4000)

12) User Login Functionality:
        -copy the template lie we did in sign up form
                do this in login.html: 
            <form action="{%url 'login %}" method="POST">
                {% csrf_token %}
                  <div class="form-group">
                        <input type="email" class="form-control" placeholder="Enter your email address" name="EMAIL">
                  </div> <!--  from-group//-->
                 <div class="form-group">
                        <input type="password" class="form-control" placeholder="Enter your password" name="password">
                 </div> <!--   from-group////-->

        --Now in -accounts/views.py
                def login(request):
                        if request.method =="POST":
                                email = request.POST['email']
                                password = request.POST['password']

                                user = auth.authenticate(email=email,password=password)

                                if user is not None:
                                auth.login(request=user)

                                else:
                                messages.error(request,'invalid login credentials')
                                return redirect,'accounts/login.html'
                        return render(request,'Your are Logged out.')
        Also put this in {%include 'includes/alerts.html %}in login.html to see the alert messages.
        and also  make sure when you are logged in you should only see logout in header
        so do these steps in navbar.html
                        <div class="col-lg-3 col-sm-6 col-8 order-2 order-lg-3">
                                <div class="d-flex justify-content-end mb-3 mb-lg-0">
                                        {% if user.id is None %}
                                       <div class="widget-header">
                                           <small class="title text-muted">Welcome Guest</small>
                                       <div>
                                         <a href="{%url 'login'%}">Sign In</a><span class="dark-transp"></span>
                                         <a href="{url 'register'}">Register</a>
                                </div>
                        </div>
                                       {% else %}
                                <div class="widget-header">
                                        <small class="title text-muted">{{user.first_name}}</small>
                                <div>
                                        <a href="#">Dashboard</a><span class="dark-transp">| </span>
                                        <a href="{% url 'logout'%}">Logout</a>
                                </div>
13) Add logout Functionality also,we can do it  as following:
        accounts/views.py
        @login_required(login_url='login')
        def logout(request):
        auth.logout(request)
        messages.success(request,'you have been logged out')                         (@- means its a decorator)        
        return redirect('login')